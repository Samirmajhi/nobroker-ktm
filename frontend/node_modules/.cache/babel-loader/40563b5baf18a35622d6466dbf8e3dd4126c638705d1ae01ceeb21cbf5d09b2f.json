{"ast":null,"code":"import{io}from'socket.io-client';import{toast}from'react-hot-toast';class MessagingService{constructor(){this.socket=null;this.isConnected=false;this.messageHandlers=[];this.notificationHandlers=[];this.typingHandlers=[];this.readReceiptHandlers=[];this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.initializeSocket();}initializeSocket(){try{this.socket=io('http://localhost:5000',{transports:['websocket','polling'],autoConnect:false,reconnection:true,reconnectionAttempts:this.maxReconnectAttempts,reconnectionDelay:1000,timeout:20000});this.setupSocketEventHandlers();}catch(error){console.error('Failed to initialize socket:',error);}}setupSocketEventHandlers(){if(!this.socket)return;this.socket.on('connect',()=>{console.log('üîå Connected to messaging server');this.isConnected=true;this.reconnectAttempts=0;this.authenticate();});this.socket.on('disconnect',()=>{console.log('üîå Disconnected from messaging server');this.isConnected=false;});this.socket.on('connect_error',error=>{console.error('üîå Connection error:',error);this.isConnected=false;this.handleReconnection();});this.socket.on('authenticated',data=>{console.log('‚úÖ Socket authenticated:',data);});this.socket.on('auth_error',error=>{console.error('‚ùå Socket authentication error:',error);toast.error('Authentication failed. Please log in again.');});this.socket.on('new_message',message=>{console.log('üì® New message received:',message);this.messageHandlers.forEach(handler=>handler(message));// Show toast notification\ntoast.success(\"New message from \".concat(message.sender_name),{duration:4000,position:'top-right'});});this.socket.on('owner_notification',data=>{console.log('üîî Owner notification:',data);if(data.type==='new_message'){toast.success('New message received!',{duration:4000,position:'top-right'});}});this.socket.on('user_typing',data=>{console.log('‚å®Ô∏è User typing:',data);this.typingHandlers.forEach(handler=>handler(data));});this.socket.on('message_read',data=>{console.log('‚úÖ Message read receipt:',data);this.readReceiptHandlers.forEach(handler=>handler(data));});this.socket.on('message_sent',data=>{console.log('‚úÖ Message sent successfully:',data);});this.socket.on('message_error',error=>{console.error('‚ùå Message error:',error);toast.error(error.message||'Failed to send message');});}handleReconnection(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;console.log(\"\\uD83D\\uDD04 Attempting to reconnect... (\".concat(this.reconnectAttempts,\"/\").concat(this.maxReconnectAttempts,\")\"));setTimeout(()=>{if(this.socket){this.socket.connect();}},2000*this.reconnectAttempts);}else{console.error('‚ùå Max reconnection attempts reached');toast.error('Connection lost. Please refresh the page.');}}authenticate(){const token=localStorage.getItem('token');if(token&&this.socket){this.socket.emit('authenticate',{token});}}connect(){if(this.socket&&!this.isConnected){this.socket.connect();}}disconnect(){if(this.socket){this.socket.disconnect();this.isConnected=false;}}sendMessage(conversationId,messageText,receiverId,listingId){if(this.socket&&this.isConnected){this.socket.emit('send_message',{conversationId,messageText,receiverId,listingId});}else{console.error('Socket not connected');toast.error('Connection lost. Please refresh the page.');}}startTyping(conversationId,receiverId){if(this.socket&&this.isConnected){this.socket.emit('typing_start',{conversationId,receiverId});}}stopTyping(conversationId,receiverId){if(this.socket&&this.isConnected){this.socket.emit('typing_stop',{conversationId,receiverId});}}markMessageRead(conversationId,senderId){if(this.socket&&this.isConnected){this.socket.emit('mark_read',{conversationId,senderId});}}onNewMessage(handler){this.messageHandlers.push(handler);return()=>{const index=this.messageHandlers.indexOf(handler);if(index>-1){this.messageHandlers.splice(index,1);}};}onNotification(handler){this.notificationHandlers.push(handler);return()=>{const index=this.notificationHandlers.indexOf(handler);if(index>-1){this.notificationHandlers.splice(index,1);}};}onTyping(handler){this.typingHandlers.push(handler);return()=>{const index=this.typingHandlers.indexOf(handler);if(index>-1){this.typingHandlers.splice(index,1);}};}onReadReceipt(handler){this.readReceiptHandlers.push(handler);return()=>{const index=this.readReceiptHandlers.indexOf(handler);if(index>-1){this.readReceiptHandlers.splice(index,1);}};}getConnectionStatus(){return this.isConnected;}getSocketId(){var _this$socket;return(_this$socket=this.socket)===null||_this$socket===void 0?void 0:_this$socket.id;}}// Create singleton instance\nconst messagingService=new MessagingService();export default messagingService;","map":{"version":3,"names":["io","toast","MessagingService","constructor","socket","isConnected","messageHandlers","notificationHandlers","typingHandlers","readReceiptHandlers","reconnectAttempts","maxReconnectAttempts","initializeSocket","transports","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","setupSocketEventHandlers","error","console","on","log","authenticate","handleReconnection","data","message","forEach","handler","success","concat","sender_name","duration","position","type","setTimeout","connect","token","localStorage","getItem","emit","disconnect","sendMessage","conversationId","messageText","receiverId","listingId","startTyping","stopTyping","markMessageRead","senderId","onNewMessage","push","index","indexOf","splice","onNotification","onTyping","onReadReceipt","getConnectionStatus","getSocketId","_this$socket","id","messagingService"],"sources":["/home/anonymous/Downloads/no-broker-kathmandu/frontend/src/services/messagingService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nexport interface Message {\r\n  message_id: string;\r\n  conversation_id: string;\r\n  sender_id: string;\r\n  message_text: string;\r\n  message_type: string;\r\n  is_read: boolean;\r\n  created_at: string;\r\n  sender_name: string;\r\n  sender_avatar?: string;\r\n  sender_role?: string;\r\n}\r\n\r\nexport interface Conversation {\r\n  conversation_id: string;\r\n  listing_id: string;\r\n  listing_title: string;\r\n  listing_price: number;\r\n  owner_id: string;\r\n  other_participant_name: string;\r\n  other_participant_id: string;\r\n  other_participant_avatar?: string;\r\n  other_participant_role?: string;\r\n  last_message?: string;\r\n  last_message_time?: string;\r\n  last_message_sender_id?: string;\r\n  unread_count: number;\r\n}\r\n\r\nexport interface Notification {\r\n  notification_id: string;\r\n  user_id: string;\r\n  title: string;\r\n  message: string;\r\n  read_status: boolean;\r\n  notification_type: string;\r\n  related_id?: string;\r\n  created_at: string;\r\n}\r\n\r\nclass MessagingService {\r\n  private socket: Socket | null = null;\r\n  private isConnected = false;\r\n  private messageHandlers: ((message: Message) => void)[] = [];\r\n  private notificationHandlers: ((notification: Notification) => void)[] = [];\r\n  private typingHandlers: ((data: { conversationId: string; isTyping: boolean }) => void)[] = [];\r\n  private readReceiptHandlers: ((data: { conversationId: string }) => void)[] = [];\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n\r\n  constructor() {\r\n    this.initializeSocket();\r\n  }\r\n\r\n  private initializeSocket() {\r\n    try {\r\n      this.socket = io('http://localhost:5000', {\r\n        transports: ['websocket', 'polling'],\r\n        autoConnect: false,\r\n        reconnection: true,\r\n        reconnectionAttempts: this.maxReconnectAttempts,\r\n        reconnectionDelay: 1000,\r\n        timeout: 20000,\r\n      });\r\n\r\n      this.setupSocketEventHandlers();\r\n    } catch (error) {\r\n      console.error('Failed to initialize socket:', error);\r\n    }\r\n  }\r\n\r\n  private setupSocketEventHandlers() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('üîå Connected to messaging server');\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n      this.authenticate();\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('üîå Disconnected from messaging server');\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('üîå Connection error:', error);\r\n      this.isConnected = false;\r\n      this.handleReconnection();\r\n    });\r\n\r\n    this.socket.on('authenticated', (data) => {\r\n      console.log('‚úÖ Socket authenticated:', data);\r\n    });\r\n\r\n    this.socket.on('auth_error', (error) => {\r\n      console.error('‚ùå Socket authentication error:', error);\r\n      toast.error('Authentication failed. Please log in again.');\r\n    });\r\n\r\n    this.socket.on('new_message', (message: Message) => {\r\n      console.log('üì® New message received:', message);\r\n      this.messageHandlers.forEach(handler => handler(message));\r\n      \r\n      // Show toast notification\r\n      toast.success(`New message from ${message.sender_name}`, {\r\n        duration: 4000,\r\n        position: 'top-right',\r\n      });\r\n    });\r\n\r\n    this.socket.on('owner_notification', (data) => {\r\n      console.log('üîî Owner notification:', data);\r\n      if (data.type === 'new_message') {\r\n        toast.success('New message received!', {\r\n          duration: 4000,\r\n          position: 'top-right',\r\n        });\r\n      }\r\n    });\r\n\r\n    this.socket.on('user_typing', (data) => {\r\n      console.log('‚å®Ô∏è User typing:', data);\r\n      this.typingHandlers.forEach(handler => handler(data));\r\n    });\r\n\r\n    this.socket.on('message_read', (data) => {\r\n      console.log('‚úÖ Message read receipt:', data);\r\n      this.readReceiptHandlers.forEach(handler => handler(data));\r\n    });\r\n\r\n    this.socket.on('message_sent', (data) => {\r\n      console.log('‚úÖ Message sent successfully:', data);\r\n    });\r\n\r\n    this.socket.on('message_error', (error) => {\r\n      console.error('‚ùå Message error:', error);\r\n      toast.error(error.message || 'Failed to send message');\r\n    });\r\n  }\r\n\r\n  private handleReconnection() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`üîÑ Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      \r\n      setTimeout(() => {\r\n        if (this.socket) {\r\n          this.socket.connect();\r\n        }\r\n      }, 2000 * this.reconnectAttempts);\r\n    } else {\r\n      console.error('‚ùå Max reconnection attempts reached');\r\n      toast.error('Connection lost. Please refresh the page.');\r\n    }\r\n  }\r\n\r\n  private authenticate() {\r\n    const token = localStorage.getItem('token');\r\n    if (token && this.socket) {\r\n      this.socket.emit('authenticate', { token });\r\n    }\r\n  }\r\n\r\n  public connect() {\r\n    if (this.socket && !this.isConnected) {\r\n      this.socket.connect();\r\n    }\r\n  }\r\n\r\n  public disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  public sendMessage(conversationId: string, messageText: string, receiverId: string, listingId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('send_message', {\r\n        conversationId,\r\n        messageText,\r\n        receiverId,\r\n        listingId\r\n      });\r\n    } else {\r\n      console.error('Socket not connected');\r\n      toast.error('Connection lost. Please refresh the page.');\r\n    }\r\n  }\r\n\r\n  public startTyping(conversationId: string, receiverId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('typing_start', { conversationId, receiverId });\r\n    }\r\n  }\r\n\r\n  public stopTyping(conversationId: string, receiverId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('typing_stop', { conversationId, receiverId });\r\n    }\r\n  }\r\n\r\n  public markMessageRead(conversationId: string, senderId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('mark_read', { conversationId, senderId });\r\n    }\r\n  }\r\n\r\n  public onNewMessage(handler: (message: Message) => void) {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      const index = this.messageHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.messageHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public onNotification(handler: (notification: Notification) => void) {\r\n    this.notificationHandlers.push(handler);\r\n    return () => {\r\n      const index = this.notificationHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.notificationHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public onTyping(handler: (data: { conversationId: string; isTyping: boolean }) => void) {\r\n    this.typingHandlers.push(handler);\r\n    return () => {\r\n      const index = this.typingHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.typingHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public onReadReceipt(handler: (data: { conversationId: string }) => void) {\r\n    this.readReceiptHandlers.push(handler);\r\n    return () => {\r\n      const index = this.readReceiptHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.readReceiptHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n\r\n  public getSocketId() {\r\n    return this.socket?.id;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst messagingService = new MessagingService();\r\n\r\nexport default messagingService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}