{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const listingsAPI = {\n  // Create new listing (JSON)\n  createListing: async listingData => {\n    const response = await api.post('/listings', listingData);\n    return response.data;\n  },\n  // Upload listing photos (multipart)\n  uploadPhotos: async (listingId, files, isPrimaryFirst = true) => {\n    const formData = new FormData();\n    files.forEach(file => formData.append('photos', file));\n    if (isPrimaryFirst) {\n      formData.append('isPrimary', 'true');\n    }\n    const response = await api.post(`/listings/${listingId}/photos`, formData);\n    return response.data;\n  },\n  // Get all listings\n  getListings: async filters => {\n    const response = await api.get('/listings', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get listing by ID\n  getListing: async id => {\n    const response = await api.get(`/listings/${id}`);\n    return response.data;\n  },\n  // Update listing\n  updateListing: async (id, listingData) => {\n    const response = await api.put(`/listings/${id}`, listingData);\n    return response.data;\n  },\n  // Delete listing\n  deleteListing: async id => {\n    const response = await api.delete(`/listings/${id}`);\n    return response.data;\n  },\n  // Get user's listings\n  getUserListings: async () => {\n    const response = await api.get('/listings/my-listings');\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","listingsAPI","createListing","listingData","post","data","uploadPhotos","listingId","files","isPrimaryFirst","formData","FormData","forEach","file","append","getListings","filters","get","params","getListing","id","updateListing","put","deleteListing","delete","getUserListings"],"sources":["C:/Users/aghim/no-broker-kathmandu/frontend/src/services/listingsAPI.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport interface CreateListingData {\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  deposit: number;\r\n  size: number;\r\n  bedrooms: number;\r\n  bathrooms: number;\r\n  location: string;\r\n  latitude?: number;\r\n  longitude?: number;\r\n  amenities: string[];\r\n  availabilityDate?: string;\r\n  propertyType: string;\r\n  furnishingStatus: 'furnished' | 'semi-furnished' | 'unfurnished';\r\n  parkingAvailable: boolean;\r\n  petFriendly: boolean;\r\n}\r\n\r\nexport interface Listing {\r\n  listing_id: string;\r\n  owner_id: string;\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  deposit: number;\r\n  size: number;\r\n  bedrooms: number;\r\n  bathrooms: number;\r\n  location: string;\r\n  latitude?: number;\r\n  longitude?: number;\r\n  amenities: string[];\r\n  availability_date?: string;\r\n  safe_rent_verified: boolean;\r\n  property_type: string;\r\n  furnishing_status: 'furnished' | 'semi-furnished' | 'unfurnished';\r\n  parking_available: boolean;\r\n  pet_friendly: boolean;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  primary_photo?: string;\r\n  owner_name?: string;\r\n  owner_kyc_status?: string;\r\n  photos?: Array<{\r\n    photo_id: string;\r\n    photo_url: string;\r\n    photo_type: string;\r\n    is_primary: boolean;\r\n    created_at: string;\r\n  }>;\r\n  ratings?: {\r\n    average: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport const listingsAPI = {\r\n  // Create new listing (JSON)\r\n  createListing: async (listingData: CreateListingData) => {\r\n    const response = await api.post('/listings', listingData);\r\n    return response.data;\r\n  },\r\n\r\n  // Upload listing photos (multipart)\r\n  uploadPhotos: async (listingId: string, files: File[], isPrimaryFirst: boolean = true) => {\r\n    const formData = new FormData();\r\n    files.forEach((file) => formData.append('photos', file));\r\n    if (isPrimaryFirst) {\r\n      formData.append('isPrimary', 'true');\r\n    }\r\n    const response = await api.post(`/listings/${listingId}/photos`, formData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get all listings\r\n  getListings: async (filters?: any) => {\r\n    const response = await api.get('/listings', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get listing by ID\r\n  getListing: async (id: string) => {\r\n    const response = await api.get(`/listings/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update listing\r\n  updateListing: async (id: string, listingData: Partial<CreateListingData>) => {\r\n    const response = await api.put(`/listings/${id}`, listingData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete listing\r\n  deleteListing: async (id: string) => {\r\n    const response = await api.delete(`/listings/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's listings\r\n  getUserListings: async () => {\r\n    const response = await api.get('/listings/my-listings');\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}