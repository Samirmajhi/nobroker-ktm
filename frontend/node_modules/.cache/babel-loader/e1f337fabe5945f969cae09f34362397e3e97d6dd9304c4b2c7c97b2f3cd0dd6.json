{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Add token to requests if it exists\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Handle token expiration\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});export const authService={// Login user\nasync login(credentials){const response=await api.post('/auth/login',credentials);return response.data;},// Register user\nasync register(userData){const response=await api.post('/auth/register',userData);return response.data;},// Get user profile\nasync getProfile(){const response=await api.get('/auth/profile');return response.data;},// Update user profile\nasync updateProfile(profileData){const response=await api.put('/auth/profile',profileData);return response.data;},// Change password\nasync changePassword(passwordData){const response=await api.put('/auth/change-password',passwordData);return response.data;},// Forgot password\nasync forgotPassword(email){const response=await api.post('/auth/forgot-password',{email});return response.data;},// Reset password\nasync resetPassword(resetData){const response=await api.post('/auth/reset-password',resetData);return response.data;},// Verify email\nasync verifyEmail(token){const response=await api.post('/auth/verify-email',{token});return response.data;},// Resend verification email\nasync resendVerificationEmail(){const response=await api.post('/auth/resend-verification');return response.data;},// Logout (client-side only)\nlogout(){localStorage.removeItem('token');// Redirect to login page\nwindow.location.href='/login';},// Check if user is authenticated\nisAuthenticated(){const token=localStorage.getItem('token');return!!token;},// Get stored token\ngetToken(){return localStorage.getItem('token');},// Set token\nsetToken(token){localStorage.setItem('token',token);},// Clear token\nclearToken(){localStorage.removeItem('token');},// Google SSO Methods\nasync getLinkedAccounts(){const response=await api.get('/auth/linked-accounts');return response.data;},// Google OAuth URL\ngetGoogleAuthUrl(){return\"\".concat(API_URL,\"/auth/google\");}};export default authService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","credentials","post","data","register","userData","getProfile","get","updateProfile","profileData","put","changePassword","passwordData","forgotPassword","email","resetPassword","resetData","verifyEmail","resendVerificationEmail","logout","isAuthenticated","getToken","setToken","setItem","clearToken","getLinkedAccounts","getGoogleAuthUrl"],"sources":["/home/anonymous/Downloads/no-broker-kathmandu/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  fullName: string;\n  email: string;\n  phone: string;\n  password: string;\n  role: 'tenant' | 'owner' | 'staff';\n}\n\nexport interface ProfileData {\n  fullName?: string;\n  phone?: string;\n  profilePictureUrl?: string;\n}\n\nexport interface AuthResponse {\n  message: string;\n  user: {\n    user_id: string;\n    full_name: string;\n    email: string;\n    phone: string;\n    role: 'tenant' | 'owner' | 'staff' | 'admin';\n    kyc_status: 'pending' | 'verified' | 'rejected';\n    profile_picture_url?: string;\n    email_verified: boolean;\n    phone_verified: boolean;\n    created_at: string;\n  };\n  token: string;\n}\n\nexport interface ProfileResponse {\n  user: {\n    user_id: string;\n    full_name: string;\n    email: string;\n    phone: string;\n    role: 'tenant' | 'owner' | 'staff' | 'admin';\n    kyc_status: 'pending' | 'verified' | 'rejected';\n    profile_picture_url?: string;\n    email_verified: boolean;\n    phone_verified: boolean;\n    created_at: string;\n  };\n}\n\nexport const authService = {\n  // Login user\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Register user\n  async register(userData: RegisterData): Promise<AuthResponse> {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Get user profile\n  async getProfile(): Promise<ProfileResponse> {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n\n  // Update user profile\n  async updateProfile(profileData: ProfileData): Promise<ProfileResponse> {\n    const response = await api.put('/auth/profile', profileData);\n    return response.data;\n  },\n\n  // Change password\n  async changePassword(passwordData: {\n    currentPassword: string;\n    newPassword: string;\n  }): Promise<{ message: string }> {\n    const response = await api.put('/auth/change-password', passwordData);\n    return response.data;\n  },\n\n  // Forgot password\n  async forgotPassword(email: string): Promise<{ message: string }> {\n    const response = await api.post('/auth/forgot-password', { email });\n    return response.data;\n  },\n\n  // Reset password\n  async resetPassword(resetData: {\n    token: string;\n    newPassword: string;\n  }): Promise<{ message: string }> {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n\n  // Verify email\n  async verifyEmail(token: string): Promise<{ message: string }> {\n    const response = await api.post('/auth/verify-email', { token });\n    return response.data;\n  },\n\n  // Resend verification email\n  async resendVerificationEmail(): Promise<{ message: string }> {\n    const response = await api.post('/auth/resend-verification');\n    return response.data;\n  },\n\n  // Logout (client-side only)\n  logout(): void {\n    localStorage.removeItem('token');\n    // Redirect to login page\n    window.location.href = '/login';\n  },\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    return !!token;\n  },\n\n  // Get stored token\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  },\n\n  // Set token\n  setToken(token: string): void {\n    localStorage.setItem('token', token);\n  },\n\n  // Clear token\n  clearToken(): void {\n    localStorage.removeItem('token');\n  },\n\n  // Google SSO Methods\n  async getLinkedAccounts(): Promise<{ linkedAccounts: any[] }> {\n    const response = await api.get('/auth/linked-accounts');\n    return response.data;\n  },\n\n  // Google OAuth URL\n  getGoogleAuthUrl(): string {\n    return `${API_URL}/auth/google`;\n  },\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}