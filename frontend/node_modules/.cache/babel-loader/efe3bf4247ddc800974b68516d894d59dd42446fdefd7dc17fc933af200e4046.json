{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\nclass MessagingService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.messageHandlers = [];\n    this.notificationHandlers = [];\n    this.typingHandlers = [];\n    this.readReceiptHandlers = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.initializeSocket();\n  }\n  initializeSocket() {\n    try {\n      this.socket = io('http://localhost:5000', {\n        transports: ['websocket', 'polling'],\n        autoConnect: false,\n        reconnection: true,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        reconnectionDelay: 1000,\n        timeout: 20000\n      });\n      this.setupSocketEventHandlers();\n    } catch (error) {\n      console.error('Failed to initialize socket:', error);\n    }\n  }\n  setupSocketEventHandlers() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      console.log('üîå Connected to messaging server');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.authenticate();\n    });\n    this.socket.on('disconnect', () => {\n      console.log('üîå Disconnected from messaging server');\n      this.isConnected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('üîå Connection error:', error);\n      this.isConnected = false;\n      this.handleReconnection();\n    });\n    this.socket.on('authenticated', data => {\n      console.log('‚úÖ Socket authenticated:', data);\n    });\n    this.socket.on('auth_error', error => {\n      console.error('‚ùå Socket authentication error:', error);\n      toast.error('Authentication failed. Please log in again.');\n    });\n    this.socket.on('new_message', message => {\n      console.log('üì® New message received:', message);\n      this.messageHandlers.forEach(handler => handler(message));\n\n      // Show toast notification\n      toast.success(`New message from ${message.sender_name}`, {\n        duration: 4000,\n        position: 'top-right'\n      });\n    });\n    this.socket.on('owner_notification', data => {\n      console.log('üîî Owner notification:', data);\n      if (data.type === 'new_message') {\n        toast.success('New message received!', {\n          duration: 4000,\n          position: 'top-right'\n        });\n      }\n    });\n    this.socket.on('user_typing', data => {\n      console.log('‚å®Ô∏è User typing:', data);\n      this.typingHandlers.forEach(handler => handler(data));\n    });\n    this.socket.on('message_read', data => {\n      console.log('‚úÖ Message read receipt:', data);\n      this.readReceiptHandlers.forEach(handler => handler(data));\n    });\n    this.socket.on('message_sent', data => {\n      console.log('‚úÖ Message sent successfully:', data);\n    });\n    this.socket.on('message_error', error => {\n      console.error('‚ùå Message error:', error);\n      toast.error(error.message || 'Failed to send message');\n    });\n  }\n  handleReconnection() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`üîÑ Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      setTimeout(() => {\n        if (this.socket) {\n          this.socket.connect();\n        }\n      }, 2000 * this.reconnectAttempts);\n    } else {\n      console.error('‚ùå Max reconnection attempts reached');\n      toast.error('Connection lost. Please refresh the page.');\n    }\n  }\n  authenticate() {\n    const token = localStorage.getItem('token');\n    if (token && this.socket) {\n      this.socket.emit('authenticate', {\n        token\n      });\n    }\n  }\n  connect() {\n    if (this.socket && !this.isConnected) {\n      this.socket.connect();\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.isConnected = false;\n    }\n  }\n  sendMessage(conversationId, messageText, receiverId, listingId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('send_message', {\n        conversationId,\n        messageText,\n        receiverId,\n        listingId\n      });\n    } else {\n      console.error('Socket not connected');\n      toast.error('Connection lost. Please refresh the page.');\n    }\n  }\n  startTyping(conversationId, receiverId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('typing_start', {\n        conversationId,\n        receiverId\n      });\n    }\n  }\n  stopTyping(conversationId, receiverId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('typing_stop', {\n        conversationId,\n        receiverId\n      });\n    }\n  }\n  markMessageRead(conversationId, senderId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('mark_read', {\n        conversationId,\n        senderId\n      });\n    }\n  }\n  onNewMessage(handler) {\n    this.messageHandlers.push(handler);\n    return () => {\n      const index = this.messageHandlers.indexOf(handler);\n      if (index > -1) {\n        this.messageHandlers.splice(index, 1);\n      }\n    };\n  }\n  onNotification(handler) {\n    this.notificationHandlers.push(handler);\n    return () => {\n      const index = this.notificationHandlers.indexOf(handler);\n      if (index > -1) {\n        this.notificationHandlers.splice(index, 1);\n      }\n    };\n  }\n  onTyping(handler) {\n    this.typingHandlers.push(handler);\n    return () => {\n      const index = this.typingHandlers.indexOf(handler);\n      if (index > -1) {\n        this.typingHandlers.splice(index, 1);\n      }\n    };\n  }\n  onReadReceipt(handler) {\n    this.readReceiptHandlers.push(handler);\n    return () => {\n      const index = this.readReceiptHandlers.indexOf(handler);\n      if (index > -1) {\n        this.readReceiptHandlers.splice(index, 1);\n      }\n    };\n  }\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n  getSocketId() {\n    var _this$socket;\n    return (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id;\n  }\n}\n\n// Create singleton instance\nconst messagingService = new MessagingService();\nexport default messagingService;","map":{"version":3,"names":["io","toast","MessagingService","constructor","socket","isConnected","messageHandlers","notificationHandlers","typingHandlers","readReceiptHandlers","reconnectAttempts","maxReconnectAttempts","initializeSocket","transports","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","setupSocketEventHandlers","error","console","on","log","authenticate","handleReconnection","data","message","forEach","handler","success","sender_name","duration","position","type","setTimeout","connect","token","localStorage","getItem","emit","disconnect","sendMessage","conversationId","messageText","receiverId","listingId","startTyping","stopTyping","markMessageRead","senderId","onNewMessage","push","index","indexOf","splice","onNotification","onTyping","onReadReceipt","getConnectionStatus","getSocketId","_this$socket","id","messagingService"],"sources":["C:/Users/aghim/no-broker-kathmandu/frontend/src/services/messagingService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nexport interface Message {\r\n  message_id: string;\r\n  conversation_id: string;\r\n  sender_id: string;\r\n  message_text: string;\r\n  message_type: string;\r\n  is_read: boolean;\r\n  created_at: string;\r\n  sender_name: string;\r\n  sender_avatar?: string;\r\n  sender_role?: string;\r\n}\r\n\r\nexport interface Conversation {\r\n  conversation_id: string;\r\n  listing_id: string;\r\n  listing_title: string;\r\n  listing_price: number;\r\n  owner_id: string;\r\n  other_participant_name: string;\r\n  other_participant_id: string;\r\n  other_participant_avatar?: string;\r\n  other_participant_role?: string;\r\n  last_message?: string;\r\n  last_message_time?: string;\r\n  last_message_sender_id?: string;\r\n  unread_count: number;\r\n}\r\n\r\nexport interface Notification {\r\n  notification_id: string;\r\n  user_id: string;\r\n  title: string;\r\n  message: string;\r\n  read_status: boolean;\r\n  notification_type: string;\r\n  related_id?: string;\r\n  created_at: string;\r\n}\r\n\r\nclass MessagingService {\r\n  private socket: Socket | null = null;\r\n  private isConnected = false;\r\n  private messageHandlers: ((message: Message) => void)[] = [];\r\n  private notificationHandlers: ((notification: Notification) => void)[] = [];\r\n  private typingHandlers: ((data: { conversationId: string; isTyping: boolean }) => void)[] = [];\r\n  private readReceiptHandlers: ((data: { conversationId: string }) => void)[] = [];\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n\r\n  constructor() {\r\n    this.initializeSocket();\r\n  }\r\n\r\n  private initializeSocket() {\r\n    try {\r\n      this.socket = io('http://localhost:5000', {\r\n        transports: ['websocket', 'polling'],\r\n        autoConnect: false,\r\n        reconnection: true,\r\n        reconnectionAttempts: this.maxReconnectAttempts,\r\n        reconnectionDelay: 1000,\r\n        timeout: 20000,\r\n      });\r\n\r\n      this.setupSocketEventHandlers();\r\n    } catch (error) {\r\n      console.error('Failed to initialize socket:', error);\r\n    }\r\n  }\r\n\r\n  private setupSocketEventHandlers() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('üîå Connected to messaging server');\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n      this.authenticate();\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('üîå Disconnected from messaging server');\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('üîå Connection error:', error);\r\n      this.isConnected = false;\r\n      this.handleReconnection();\r\n    });\r\n\r\n    this.socket.on('authenticated', (data) => {\r\n      console.log('‚úÖ Socket authenticated:', data);\r\n    });\r\n\r\n    this.socket.on('auth_error', (error) => {\r\n      console.error('‚ùå Socket authentication error:', error);\r\n      toast.error('Authentication failed. Please log in again.');\r\n    });\r\n\r\n    this.socket.on('new_message', (message: Message) => {\r\n      console.log('üì® New message received:', message);\r\n      this.messageHandlers.forEach(handler => handler(message));\r\n      \r\n      // Show toast notification\r\n      toast.success(`New message from ${message.sender_name}`, {\r\n        duration: 4000,\r\n        position: 'top-right',\r\n      });\r\n    });\r\n\r\n    this.socket.on('owner_notification', (data) => {\r\n      console.log('üîî Owner notification:', data);\r\n      if (data.type === 'new_message') {\r\n        toast.success('New message received!', {\r\n          duration: 4000,\r\n          position: 'top-right',\r\n        });\r\n      }\r\n    });\r\n\r\n    this.socket.on('user_typing', (data) => {\r\n      console.log('‚å®Ô∏è User typing:', data);\r\n      this.typingHandlers.forEach(handler => handler(data));\r\n    });\r\n\r\n    this.socket.on('message_read', (data) => {\r\n      console.log('‚úÖ Message read receipt:', data);\r\n      this.readReceiptHandlers.forEach(handler => handler(data));\r\n    });\r\n\r\n    this.socket.on('message_sent', (data) => {\r\n      console.log('‚úÖ Message sent successfully:', data);\r\n    });\r\n\r\n    this.socket.on('message_error', (error) => {\r\n      console.error('‚ùå Message error:', error);\r\n      toast.error(error.message || 'Failed to send message');\r\n    });\r\n  }\r\n\r\n  private handleReconnection() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`üîÑ Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      \r\n      setTimeout(() => {\r\n        if (this.socket) {\r\n          this.socket.connect();\r\n        }\r\n      }, 2000 * this.reconnectAttempts);\r\n    } else {\r\n      console.error('‚ùå Max reconnection attempts reached');\r\n      toast.error('Connection lost. Please refresh the page.');\r\n    }\r\n  }\r\n\r\n  private authenticate() {\r\n    const token = localStorage.getItem('token');\r\n    if (token && this.socket) {\r\n      this.socket.emit('authenticate', { token });\r\n    }\r\n  }\r\n\r\n  public connect() {\r\n    if (this.socket && !this.isConnected) {\r\n      this.socket.connect();\r\n    }\r\n  }\r\n\r\n  public disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  public sendMessage(conversationId: string, messageText: string, receiverId: string, listingId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('send_message', {\r\n        conversationId,\r\n        messageText,\r\n        receiverId,\r\n        listingId\r\n      });\r\n    } else {\r\n      console.error('Socket not connected');\r\n      toast.error('Connection lost. Please refresh the page.');\r\n    }\r\n  }\r\n\r\n  public startTyping(conversationId: string, receiverId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('typing_start', { conversationId, receiverId });\r\n    }\r\n  }\r\n\r\n  public stopTyping(conversationId: string, receiverId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('typing_stop', { conversationId, receiverId });\r\n    }\r\n  }\r\n\r\n  public markMessageRead(conversationId: string, senderId: string) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('mark_read', { conversationId, senderId });\r\n    }\r\n  }\r\n\r\n  public onNewMessage(handler: (message: Message) => void) {\r\n    this.messageHandlers.push(handler);\r\n    return () => {\r\n      const index = this.messageHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.messageHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public onNotification(handler: (notification: Notification) => void) {\r\n    this.notificationHandlers.push(handler);\r\n    return () => {\r\n      const index = this.notificationHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.notificationHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public onTyping(handler: (data: { conversationId: string; isTyping: boolean }) => void) {\r\n    this.typingHandlers.push(handler);\r\n    return () => {\r\n      const index = this.typingHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.typingHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public onReadReceipt(handler: (data: { conversationId: string }) => void) {\r\n    this.readReceiptHandlers.push(handler);\r\n    return () => {\r\n      const index = this.readReceiptHandlers.indexOf(handler);\r\n      if (index > -1) {\r\n        this.readReceiptHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  public getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n\r\n  public getSocketId() {\r\n    return this.socket?.id;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst messagingService = new MessagingService();\r\n\r\nexport default messagingService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}