{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Login user\n  async login(credentials) {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  // Register user\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  // Get user profile\n  async getProfile() {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await api.put('/auth/profile', profileData);\n    return response.data;\n  },\n  // Change password\n  async changePassword(passwordData) {\n    const response = await api.put('/auth/change-password', passwordData);\n    return response.data;\n  },\n  // Forgot password\n  async forgotPassword(email) {\n    const response = await api.post('/auth/forgot-password', {\n      email\n    });\n    return response.data;\n  },\n  // Reset password\n  async resetPassword(resetData) {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n  // Verify email\n  async verifyEmail(token) {\n    const response = await api.post('/auth/verify-email', {\n      token\n    });\n    return response.data;\n  },\n  // Resend verification email\n  async resendVerificationEmail() {\n    const response = await api.post('/auth/resend-verification');\n    return response.data;\n  },\n  // Logout (client-side only)\n  logout() {\n    localStorage.removeItem('token');\n    // Redirect to login page\n    window.location.href = '/login';\n  },\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  },\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('token');\n  },\n  // Set token\n  setToken(token) {\n    localStorage.setItem('token', token);\n  },\n  // Clear token\n  clearToken() {\n    localStorage.removeItem('token');\n  },\n  // Google SSO Methods\n  async getLinkedAccounts() {\n    const response = await api.get('/auth/linked-accounts');\n    return response.data;\n  },\n  // Google OAuth URL\n  getGoogleAuthUrl() {\n    return `${API_URL}/auth/google`;\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","credentials","post","data","register","userData","getProfile","get","updateProfile","profileData","put","changePassword","passwordData","forgotPassword","email","resetPassword","resetData","verifyEmail","resendVerificationEmail","logout","isAuthenticated","getToken","setToken","setItem","clearToken","getLinkedAccounts","getGoogleAuthUrl"],"sources":["/home/anonymous/Downloads/no-broker-kathmandu/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  fullName: string;\n  email: string;\n  phone: string;\n  password: string;\n  role: 'tenant' | 'owner' | 'staff';\n}\n\nexport interface ProfileData {\n  fullName?: string;\n  phone?: string;\n  profilePictureUrl?: string;\n}\n\nexport interface AuthResponse {\n  message: string;\n  user: {\n    user_id: string;\n    full_name: string;\n    email: string;\n    phone: string;\n    role: 'tenant' | 'owner' | 'staff' | 'admin';\n    kyc_status: 'pending' | 'verified' | 'rejected';\n    profile_picture_url?: string;\n    email_verified: boolean;\n    phone_verified: boolean;\n    created_at: string;\n  };\n  token: string;\n}\n\nexport interface ProfileResponse {\n  user: {\n    user_id: string;\n    full_name: string;\n    email: string;\n    phone: string;\n    role: 'tenant' | 'owner' | 'staff' | 'admin';\n    kyc_status: 'pending' | 'verified' | 'rejected';\n    profile_picture_url?: string;\n    email_verified: boolean;\n    phone_verified: boolean;\n    created_at: string;\n  };\n}\n\nexport const authService = {\n  // Login user\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Register user\n  async register(userData: RegisterData): Promise<AuthResponse> {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Get user profile\n  async getProfile(): Promise<ProfileResponse> {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n\n  // Update user profile\n  async updateProfile(profileData: ProfileData): Promise<ProfileResponse> {\n    const response = await api.put('/auth/profile', profileData);\n    return response.data;\n  },\n\n  // Change password\n  async changePassword(passwordData: {\n    currentPassword: string;\n    newPassword: string;\n  }): Promise<{ message: string }> {\n    const response = await api.put('/auth/change-password', passwordData);\n    return response.data;\n  },\n\n  // Forgot password\n  async forgotPassword(email: string): Promise<{ message: string }> {\n    const response = await api.post('/auth/forgot-password', { email });\n    return response.data;\n  },\n\n  // Reset password\n  async resetPassword(resetData: {\n    token: string;\n    newPassword: string;\n  }): Promise<{ message: string }> {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n\n  // Verify email\n  async verifyEmail(token: string): Promise<{ message: string }> {\n    const response = await api.post('/auth/verify-email', { token });\n    return response.data;\n  },\n\n  // Resend verification email\n  async resendVerificationEmail(): Promise<{ message: string }> {\n    const response = await api.post('/auth/resend-verification');\n    return response.data;\n  },\n\n  // Logout (client-side only)\n  logout(): void {\n    localStorage.removeItem('token');\n    // Redirect to login page\n    window.location.href = '/login';\n  },\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    return !!token;\n  },\n\n  // Get stored token\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  },\n\n  // Set token\n  setToken(token: string): void {\n    localStorage.setItem('token', token);\n  },\n\n  // Clear token\n  clearToken(): void {\n    localStorage.removeItem('token');\n  },\n\n  // Google SSO Methods\n  async getLinkedAccounts(): Promise<{ linkedAccounts: any[] }> {\n    const response = await api.get('/auth/linked-accounts');\n    return response.data;\n  },\n\n  // Google OAuth URL\n  getGoogleAuthUrl(): string {\n    return `${API_URL}/auth/google`;\n  },\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}