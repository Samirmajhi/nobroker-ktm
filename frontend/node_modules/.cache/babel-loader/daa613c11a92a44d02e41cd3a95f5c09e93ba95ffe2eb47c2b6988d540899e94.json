{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  isLoading: false,\n  error: null\n};\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    setNotifications: (state, action) => {\n      state.notifications = action.payload;\n      state.unreadCount = action.payload.filter(n => !n.is_read).length;\n    },\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n      if (!action.payload.is_read) {\n        state.unreadCount += 1;\n      }\n    },\n    markAsRead: (state, action) => {\n      const notification = state.notifications.find(n => n.notification_id === action.payload);\n      if (notification && !notification.is_read) {\n        notification.is_read = true;\n        state.unreadCount -= 1;\n      }\n    },\n    markAllAsRead: state => {\n      state.notifications.forEach(n => n.is_read = true);\n      state.unreadCount = 0;\n    },\n    setLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setNotifications,\n  addNotification,\n  markAsRead,\n  markAllAsRead,\n  setLoading,\n  setError\n} = notificationsSlice.actions;\nexport default notificationsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","notifications","unreadCount","isLoading","error","notificationsSlice","name","reducers","setNotifications","state","action","payload","filter","n","is_read","length","addNotification","unshift","markAsRead","notification","find","notification_id","markAllAsRead","forEach","setLoading","setError","actions","reducer"],"sources":["C:/Users/aghim/no-broker-kathmandu/frontend/src/store/slices/notificationsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Notification {\r\n  notification_id: string;\r\n  user_id: string;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  is_read: boolean;\r\n  related_entity_type?: 'listing' | 'visit' | 'agreement' | 'payment';\r\n  related_entity_id?: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface NotificationsState {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: NotificationsState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState,\r\n  reducers: {\r\n    setNotifications: (state, action: PayloadAction<Notification[]>) => {\r\n      state.notifications = action.payload;\r\n      state.unreadCount = action.payload.filter(n => !n.is_read).length;\r\n    },\r\n    addNotification: (state, action: PayloadAction<Notification>) => {\r\n      state.notifications.unshift(action.payload);\r\n      if (!action.payload.is_read) {\r\n        state.unreadCount += 1;\r\n      }\r\n    },\r\n    markAsRead: (state, action: PayloadAction<string>) => {\r\n      const notification = state.notifications.find(n => n.notification_id === action.payload);\r\n      if (notification && !notification.is_read) {\r\n        notification.is_read = true;\r\n        state.unreadCount -= 1;\r\n      }\r\n    },\r\n    markAllAsRead: (state) => {\r\n      state.notifications.forEach(n => n.is_read = true);\r\n      state.unreadCount = 0;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  setNotifications, \r\n  addNotification, \r\n  markAsRead, \r\n  markAllAsRead, \r\n  setLoading, \r\n  setError \r\n} = notificationsSlice.actions;\r\nexport default notificationsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAqB7D,MAAMC,YAAgC,GAAG;EACvCC,aAAa,EAAE,EAAE;EACjBC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,kBAAkB,GAAGN,WAAW,CAAC;EACrCO,IAAI,EAAE,eAAe;EACrBN,YAAY;EACZO,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAqC,KAAK;MAClED,KAAK,CAACR,aAAa,GAAGS,MAAM,CAACC,OAAO;MACpCF,KAAK,CAACP,WAAW,GAAGQ,MAAM,CAACC,OAAO,CAACC,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM;IACnE,CAAC;IACDC,eAAe,EAAEA,CAACP,KAAK,EAAEC,MAAmC,KAAK;MAC/DD,KAAK,CAACR,aAAa,CAACgB,OAAO,CAACP,MAAM,CAACC,OAAO,CAAC;MAC3C,IAAI,CAACD,MAAM,CAACC,OAAO,CAACG,OAAO,EAAE;QAC3BL,KAAK,CAACP,WAAW,IAAI,CAAC;MACxB;IACF,CAAC;IACDgB,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAA6B,KAAK;MACpD,MAAMS,YAAY,GAAGV,KAAK,CAACR,aAAa,CAACmB,IAAI,CAACP,CAAC,IAAIA,CAAC,CAACQ,eAAe,KAAKX,MAAM,CAACC,OAAO,CAAC;MACxF,IAAIQ,YAAY,IAAI,CAACA,YAAY,CAACL,OAAO,EAAE;QACzCK,YAAY,CAACL,OAAO,GAAG,IAAI;QAC3BL,KAAK,CAACP,WAAW,IAAI,CAAC;MACxB;IACF,CAAC;IACDoB,aAAa,EAAGb,KAAK,IAAK;MACxBA,KAAK,CAACR,aAAa,CAACsB,OAAO,CAACV,CAAC,IAAIA,CAAC,CAACC,OAAO,GAAG,IAAI,CAAC;MAClDL,KAAK,CAACP,WAAW,GAAG,CAAC;IACvB,CAAC;IACDsB,UAAU,EAAEA,CAACf,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;IAClC,CAAC;IACDc,QAAQ,EAAEA,CAAChB,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,gBAAgB;EAChBQ,eAAe;EACfE,UAAU;EACVI,aAAa;EACbE,UAAU;EACVC;AACF,CAAC,GAAGpB,kBAAkB,CAACqB,OAAO;AAC9B,eAAerB,kBAAkB,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}