{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const visitsAPI = {\n  // Get all visits for the current user\n  getVisits: async () => {\n    const response = await api.get('/visits/user');\n    return response.data;\n  },\n  // Schedule a visit\n  scheduleVisit: async visitData => {\n    const response = await api.post('/visits', visitData);\n    return response.data;\n  },\n  // Update visit status\n  updateVisitStatus: async (visitId, statusData) => {\n    const response = await api.put(`/visits/${visitId}/status`, statusData);\n    return response.data;\n  },\n  // Cancel a visit\n  cancelVisit: async visitId => {\n    const response = await api.post(`/visits/${visitId}/cancel`);\n    return response.data;\n  },\n  // Get visits for a specific listing\n  getListingVisits: async listingId => {\n    const response = await api.get(`/visits/listing/${listingId}`);\n    return response.data;\n  },\n  // Assign representative to a visit\n  assignRepresentative: async (visitId, repId) => {\n    const response = await api.put(`/visits/${visitId}/assign-rep`, {\n      repId\n    });\n    return response.data;\n  },\n  // Get visit statistics for a listing\n  getVisitStats: async listingId => {\n    const response = await api.get(`/visits/listing/${listingId}/stats`);\n    return response.data;\n  },\n  // Submit tenant/owner decision on a visit\n  submitDecision: async (visitId, data) => {\n    const response = await api.post(`/visits/${visitId}/decision`, data);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","visitsAPI","getVisits","get","data","scheduleVisit","visitData","post","updateVisitStatus","visitId","statusData","put","cancelVisit","getListingVisits","listingId","assignRepresentative","repId","getVisitStats","submitDecision"],"sources":["C:/Users/aghim/no-broker-kathmandu/frontend/src/services/visitsAPI.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const visitsAPI = {\r\n  // Get all visits for the current user\r\n  getVisits: async () => {\r\n    const response = await api.get('/visits/user');\r\n    return response.data;\r\n  },\r\n\r\n  // Schedule a visit\r\n  scheduleVisit: async (visitData: {\r\n    listing_id: string;\r\n    visit_datetime: string;\r\n    visit_notes?: string;\r\n  }) => {\r\n    const response = await api.post('/visits', visitData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update visit status\r\n  updateVisitStatus: async (visitId: string, statusData: {\r\n    status: 'scheduled' | 'completed' | 'cancelled';\r\n    feedback?: string;\r\n  }) => {\r\n    const response = await api.put(`/visits/${visitId}/status`, statusData);\r\n    return response.data;\r\n  },\r\n\r\n  // Cancel a visit\r\n  cancelVisit: async (visitId: string) => {\r\n    const response = await api.post(`/visits/${visitId}/cancel`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get visits for a specific listing\r\n  getListingVisits: async (listingId: string) => {\r\n    const response = await api.get(`/visits/listing/${listingId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign representative to a visit\r\n  assignRepresentative: async (visitId: string, repId: string) => {\r\n    const response = await api.put(`/visits/${visitId}/assign-rep`, { repId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get visit statistics for a listing\r\n  getVisitStats: async (listingId: string) => {\r\n    const response = await api.get(`/visits/listing/${listingId}/stats`);\r\n    return response.data;\r\n  },\r\n  \r\n  // Submit tenant/owner decision on a visit\r\n  submitDecision: async (\r\n    visitId: string,\r\n    data: { decision: 'interested' | 'not_interested' | 'undecided'; notes?: string }\r\n  ) => {\r\n    const response = await api.post(`/visits/${visitId}/decision`, data);\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}